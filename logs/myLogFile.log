12/31/24, 4:12 PM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1/health","error":"Not Found","statusCode":404}
12/31/24, 4:19 PM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/2/25, 10:49 PM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1/company","error":"Not Found","statusCode":404}
1/2/25, 10:55 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string","companyName should not be empty"],"error":"Bad Request","statusCode":400}
1/2/25, 10:56 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string","companyName should not be empty"],"error":"Bad Request","statusCode":400}
1/2/25, 10:57 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string","companyName should not be empty"],"error":"Bad Request","statusCode":400}
1/2/25, 10:57 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:00 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:01 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:02 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:02 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:03 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:13 PM - IP: unknown - [AllExceptionsFilter] {"message":"Company with ID 87f34491-b0f7-437c-acf8-f5e4899d85fa not found","error":"Not Found","statusCode":404}
1/2/25, 11:14 PM - IP: unknown - [AllExceptionsFilter] {"message":"Company with ID 87f34491-b0f7-437c-acf8-f5e4899d85fa not found","error":"Not Found","statusCode":404}
1/2/25, 11:23 PM - IP: unknown - [AllExceptionsFilter] {"message":"Company with ID 87f34491-b0f7-437c-acf8-f5e4899d85fa not found","error":"Not Found","statusCode":404}
1/3/25, 12:06 AM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/3/25, 12:07 AM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/3/25, 12:18 AM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/3/25, 12:55 AM - IP: unknown - [AllExceptionsFilter] {"message":"Invalid credentials","error":"Forbidden","statusCode":403}
1/3/25, 1:00 AM - IP: unknown - [AllExceptionsFilter] {"message":"Expected double-quoted property name in JSON at position 75","error":"Bad Request","statusCode":400}
1/3/25, 1:00 AM - IP: unknown - [AllExceptionsFilter] {"message":["password must be a string","password should not be empty"],"error":"Bad Request","statusCode":400}
1/3/25, 1:00 AM - IP: unknown - [AllExceptionsFilter] {"message":"Invalid credentials","error":"Forbidden","statusCode":403}
1/3/25, 1:01 AM - IP: unknown - [AllExceptionsFilter] {"message":["fullName must be a string","fullName should not be empty","password must be a string","password should not be empty"],"error":"Bad Request","statusCode":400}
1/3/25, 1:02 AM - IP: unknown - [AllExceptionsFilter] Failed to create user: 
Invalid `this.databaseService.user.create()` invocation in
E:\PersonalProjects\POS-API\src\auth\auth.service.ts:82:55

  79 // Hash password and create user
  80 const hashedPassword = await this.hashData(createUserData.password);
  81 // create a new user without a refresh token
→ 82 const newUser = await this.databaseService.user.create(
Null constraint violation on the fields: (`companyId`)
1/3/25, 1:08 AM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/3/25, 2:10 AM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /","error":"Not Found","statusCode":404}
1/3/25, 2:10 AM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /favicon.ico","error":"Not Found","statusCode":404}
1/3/25, 2:11 AM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1","error":"Not Found","statusCode":404}
1/3/25, 2:12 AM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1","error":"Not Found","statusCode":404}
1/3/25, 2:12 AM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1","error":"Not Found","statusCode":404}
1/3/25, 2:12 AM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1","error":"Not Found","statusCode":404}
1/5/25, 5:17 PM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1/category","error":"Not Found","statusCode":404}
1/5/25, 5:18 PM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/5/25, 5:27 PM - IP: unknown - [AllExceptionsFilter]  Invalid `this.databaseService.category.findFirst()` invocation in E:\PersonalProjects\POS-API\src\categories\categories.service.ts:21:48    18 }   19    20 async findOne(categoryId: number): Promise<Category> { → 21   return await this.databaseService.category.findFirst({          where: {            categoryId: "1"                        ~~~          }        })  Argument `categoryId`: Invalid value provided. Expected IntFilter or Int, provided String.
1/5/25, 5:32 PM - IP: unknown - [AllExceptionsFilter]  Invalid `this.databaseService.category.findFirst()` invocation in E:\PersonalProjects\POS-API\src\categories\categories.service.ts:21:48    18 }   19    20 async findOne(categoryId: number): Promise<Category> { → 21   return await this.databaseService.category.findFirst({          where: {            categoryId: "1"                        ~~~          }        })  Argument `categoryId`: Invalid value provided. Expected IntFilter or Int, provided String.
1/5/25, 6:22 PM - IP: unknown - [AllExceptionsFilter] {"message":"Expected double-quoted property name in JSON at position 163","error":"Bad Request","statusCode":400}
1/5/25, 6:23 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyId must be an integer number","companyId should not be empty"],"error":"Bad Request","statusCode":400}
1/5/25, 6:28 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyId must be an integer number","companyId should not be empty"],"error":"Bad Request","statusCode":400}
1/5/25, 6:28 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyId must be an integer number","companyId should not be empty"],"error":"Bad Request","statusCode":400}
1/5/25, 6:31 PM - IP: unknown - [AllExceptionsFilter]  Invalid `this.databaseService.customer.findUnique()` invocation in E:\PersonalProjects\POS-API\src\customers\customers.service.ts:21:42    18 }   19    20 findOne(customerId: number): Promise<Customer> { → 21   return this.databaseService.customer.findUnique({          where: {            customerId: "1"                        ~~~          }        })  Argument `customerId`: Invalid value provided. Expected Int, provided String.
1/5/25, 6:34 PM - IP: unknown - [AllExceptionsFilter] {"message":"Expected double-quoted property name in JSON at position 62","error":"Bad Request","statusCode":400}
1/5/25, 6:34 PM - IP: unknown - [AllExceptionsFilter] {"message":"Company with ID 1 not found","error":"Not Found","statusCode":404}
1/5/25, 7:38 PM - IP: unknown - [AllExceptionsFilter] {"message":"Expected ',' or '}' after property value in JSON at position 59","error":"Bad Request","statusCode":400}
1/5/25, 7:38 PM - IP: unknown - [AllExceptionsFilter] 
Invalid `this.databaseService.inventory.create()` invocation in
E:\PersonalProjects\POS-API\src\inventory\inventory.service.ts:34:49

  31 
  32 // CRUD Methods
  33 async create(createInventoryData: CreateInventoryDto): Promise<Inventory> {
→ 34   return await this.databaseService.inventory.create(
Foreign key constraint violated: `Inventory_productId_fkey (index)`
1/6/25, 4:58 PM - IP: unknown - [AllExceptionsFilter] 
Invalid `this.databaseService.inventory.create()` invocation in
E:\PersonalProjects\POS-API\src\inventory\inventory.service.ts:34:49

  31 
  32 // CRUD Methods
  33 async create(createInventoryData: CreateInventoryDto): Promise<Inventory> {
→ 34   return await this.databaseService.inventory.create(
Foreign key constraint violated: `Inventory_productId_fkey (index)`
1/8/25, 11:15 PM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /favicon.ico","error":"Not Found","statusCode":404}
1/9/25, 11:36 AM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /","error":"Not Found","statusCode":404}
1/9/25, 12:09 PM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /","error":"Not Found","statusCode":404}
1/9/25, 6:08 PM - IP: unknown - [AllExceptionsFilter]  Invalid `tx.sale.create()` invocation in /app/src/sales/sales.service.ts:50:34    47 }): Promise<Sale> {   48   return this.databaseService.$transaction(async (tx) => {   49     // 1. Create the Sale → 50     const sale = await tx.sale.create({            data: {          +   subtotal: Decimal            }          })  Argument `subtotal` is missing.
1/11/25, 8:47 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:47 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:53 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:53 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests
1/11/25, 8:54 PM - IP: unknown - [AllExceptionsFilter] ThrottlerException: Too Many Requests

12/31/24, 4:12 PM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1/health","error":"Not Found","statusCode":404}
12/31/24, 4:19 PM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/2/25, 10:49 PM - IP: unknown - [AllExceptionsFilter] {"message":"Cannot GET /api/v1/company","error":"Not Found","statusCode":404}
1/2/25, 10:55 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string","companyName should not be empty"],"error":"Bad Request","statusCode":400}
1/2/25, 10:56 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string","companyName should not be empty"],"error":"Bad Request","statusCode":400}
1/2/25, 10:57 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string","companyName should not be empty"],"error":"Bad Request","statusCode":400}
1/2/25, 10:57 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:00 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:01 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:02 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:02 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:03 PM - IP: unknown - [AllExceptionsFilter] {"message":["companyName must be a string"],"error":"Bad Request","statusCode":400}
1/2/25, 11:13 PM - IP: unknown - [AllExceptionsFilter] {"message":"Company with ID 87f34491-b0f7-437c-acf8-f5e4899d85fa not found","error":"Not Found","statusCode":404}
1/2/25, 11:14 PM - IP: unknown - [AllExceptionsFilter] {"message":"Company with ID 87f34491-b0f7-437c-acf8-f5e4899d85fa not found","error":"Not Found","statusCode":404}
1/2/25, 11:23 PM - IP: unknown - [AllExceptionsFilter] {"message":"Company with ID 87f34491-b0f7-437c-acf8-f5e4899d85fa not found","error":"Not Found","statusCode":404}
1/3/25, 12:06 AM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/3/25, 12:07 AM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/3/25, 12:18 AM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
1/3/25, 12:55 AM - IP: unknown - [AllExceptionsFilter] {"message":"Invalid credentials","error":"Forbidden","statusCode":403}
1/3/25, 1:00 AM - IP: unknown - [AllExceptionsFilter] {"message":"Expected double-quoted property name in JSON at position 75","error":"Bad Request","statusCode":400}
1/3/25, 1:00 AM - IP: unknown - [AllExceptionsFilter] {"message":["password must be a string","password should not be empty"],"error":"Bad Request","statusCode":400}
1/3/25, 1:00 AM - IP: unknown - [AllExceptionsFilter] {"message":"Invalid credentials","error":"Forbidden","statusCode":403}
1/3/25, 1:01 AM - IP: unknown - [AllExceptionsFilter] {"message":["fullName must be a string","fullName should not be empty","password must be a string","password should not be empty"],"error":"Bad Request","statusCode":400}
1/3/25, 1:02 AM - IP: unknown - [AllExceptionsFilter] Failed to create user: 
Invalid `this.databaseService.user.create()` invocation in
E:\PersonalProjects\POS-API\src\auth\auth.service.ts:82:55

  79 // Hash password and create user
  80 const hashedPassword = await this.hashData(createUserData.password);
  81 // create a new user without a refresh token
â†’ 82 const newUser = await this.databaseService.user.create(
Null constraint violation on the fields: (`companyId`)
1/3/25, 1:08 AM - IP: unknown - [AllExceptionsFilter] {"message":"Unauthorized","statusCode":401}
